@page "/columns"
@using BlazorLaboratory.BlazorUI.Dto
<h3>Columns</h3>
<br/>

<MudGrid Justify="Justify.FlexStart">
    <MudItem xs="11">
        <MudText Typo="Typo.h6" Align="Align.Center" Style="background: red">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</MudText>
        </MudItem>
    <MudItem xs="1">
        <MudText Typo="Typo.h6" Align="Align.Center" Style="background: greenyellow">1</MudText>
        </MudItem>
</MudGrid>

<br/>
<br/>

<MudList Clickable="true" Class="overflow-scroll" Style="max-height: 300px; text-transform:none">
    <MudListItem Icon="@Icons.Material.Filled.Circle" IconSize="Size.Small" IconColor="@Color.Inherit">

        <div class="d-flex flex-grow-1 gap-4">
            <MudCard Class="flex-shrink-1 py-8" Width="100%" Elevation="0" Style="background-color: aqua">
                <MudText Typo="Typo.h6" Align="Align.Center" Style="background: red">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</MudText>
            </MudCard>
            <div class="align-self-center">
                <MudIconButton Icon="@Icons.Filled.Close" aria-label="delete" Size="Size.Small"/>
            </div>
        </div>
    </MudListItem>

</MudList>

<MudAlert Severity="Severity.Normal" Icon="@Icons.Outlined.Info" Class="feedback">
    <div> Have some extra info? <br> <b class="contact"> Contact owner </b></div>
</MudAlert>




<MudSelect MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))" MultiSelection="true" 
           @bind-Value="value" @bind-SelectedValues="options" T="string" Label="US States" AdornmentIcon="@Icons.Material.Filled.Search" AnchorOrigin="Origin.BottomCenter">
    @foreach (var state in states)
    {
        <MudSelectItem T="string" Value="@state">@state</MudSelectItem>
    }
</MudSelect>

<MudSwitch @bind-Checked="multiselectionTextChoice" Class="mud-width-full" Color="Color.Primary">MultiSelection Text choice</MudSwitch>

<MudGrid Class="mt-3 px-4">
    <MudItem xs="6">
        <MudText Typo="Typo.subtitle2">Value:</MudText>
        <MudText Typo="Typo.subtitle2">"</MudText>
        <MudText Typo="Typo.body2" Class="pl-4">@value</MudText>
        <MudText Typo="Typo.subtitle2">"</MudText>
    </MudItem>
    <MudItem xs="6">
        <MudText Typo="Typo.subtitle2">SelectedValues: HashSet&lt;string&gt;</MudText>
        <MudText Typo="Typo.subtitle2">{</MudText>
        <MudText Typo="Typo.body2" Class="pl-4">@(string.Join(", ", options.Select(x => $"\"{x}\"")))</MudText>
        <MudText Typo="Typo.subtitle2">}</MudText>
    </MudItem>
</MudGrid>

@code {
    private bool multiselectionTextChoice;
    private string value { get; set; } = "Nothing selected";
    private IEnumerable<string> options { get; set; } = new HashSet<string>() { "Alaska" };

    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
    };

    private IEnumerable<KeywordDto> AllKeywords = new List<KeywordDto>
    {
        new KeywordDto{ Id = Guid.NewGuid(), Name = "Test1"},
        new KeywordDto{ Id = Guid.NewGuid(), Name = "Test2"},
        new KeywordDto{ Id = Guid.NewGuid(), Name = "Test3"},
        new KeywordDto{ Id = Guid.NewGuid(), Name = "Test4"},
    };

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        if (multiselectionTextChoice)
        {
            return $"Selected state{(selectedValues.Count > 1 ? "s" : "")}: {string.Join(", ", selectedValues.Select(x => x))}";
        }
        else if (selectedValues.Count == states.Length)
        {
            return "All";
        }
        else
        {
            return $"{selectedValues.Count} state{(selectedValues.Count > 1 ? "s have" : " has")} been selected";
        }
    }
}