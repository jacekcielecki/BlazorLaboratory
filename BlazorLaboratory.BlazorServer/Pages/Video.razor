@page "/video"
@inject ISnackbar Snackbar

<h3>Video</h3>

<div style="background: black; position: relative;">
    <BlazoredVideo @ref="_video" VideoEventOptions="_videoOptions" EndedEvent="VideoEndedEvent" class="w-100" autoplay="autoplay" muted="muted" style="width: 853px; height: 380px;">
        <source src="video/Multimedia1.mp4" type="video/mp4"/>
    </BlazoredVideo>
    
    @if (_videoEnded)
    {
        <div style="position: absolute; right: 20%; top: 20%;">
            <MudAlert Severity="Severity.Info" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Info" Elevation="0" Class="my-2" Style="background: #0052FF;">
                <div style="font-size: .8rem; font-weight: 400">
                    Click here to go to the module 1.
                </div>
            </MudAlert>
        </div>

        <div style="position: absolute; left: 35%; top: 70%;">
            <MudAlert Severity="Severity.Success" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Info" Elevation="0" Class="my-2" Style="background: green;">
                <div style="font-size: .8rem; font-weight: 400">
                    Click here to go to the module 2.
                </div>
            </MudAlert>
        </div>
    }
</div>
<div class="d-flex">
    <MudButton @onclick="@(async () => await PlayOrPause(_video))" Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.PlayArrow" Class="mt-4">Play</MudButton>
    <MudButton @onclick="@(async () => await MuteOrUnMute(_video))" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.VolumeMute" Class="mt-4 ml-4">Mute</MudButton>
</div>

@code {
    private readonly Dictionary<VideoEvents, VideoStateOptions> _videoOptions = new();
    private bool _videoEnded;
    private BlazoredVideo _video = new();

    private void VideoEndedEvent() => _videoEnded = true;

    protected override void OnInitialized()
    {
        var pausedOption = new VideoStateOptions { Paused = true, Muted = true, DefaultMuted = true, Volume = false };
        _videoOptions[VideoEvents.CanPlay] = pausedOption;
        _videoOptions[VideoEvents.Ended] = pausedOption;
        _videoOptions[VideoEvents.Pause] = pausedOption;
        _videoOptions[VideoEvents.Play] = pausedOption;
    }

    private async Task PlayOrPause(BlazoredVideo video)
    {
        if (await video.GetPausedAsync())
        {
            await video.StartPlayback();
        }
        else
        {
            await video.PausePlayback();
        }
    }

    private async Task MuteOrUnMute(BlazoredVideo video)
    {
        if (!(await video.GetMutedAsync()))
        {
            await video.SetMutedAsync(true);
        }
        else
        {
            await video.SetMutedAsync(false);
        }
    }
}
