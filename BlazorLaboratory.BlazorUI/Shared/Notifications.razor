@using BlazorLaboratory.Shared.DTOs
@using BlazorLaboratory.Shared.Enums

<MudBadge Dot="true" Visible="true" Color="Color.Primary" Overlap="true" Class="mx-6 my-4 align-end">
    <MudIconButton Icon="@Icons.Material.Filled.NotificationsNone" Color="Color.Inherit" aria-label="notifications" OnClick="@ToggleOpenNotifications" />
    <MudPopover Open="@_isNotificationsPopoverOpen" Fixed="true" Class="px-4 pt-4" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopLeft" Style="Width: 400px; min-height: 435px; max-height: 435px">
        <MudListSubheader>
            <div>
                <MudText Align="Align.Left" Typo="Typo.h6" Class="d-inline align-left"><b>Notifications</b></MudText>
            </div>
        </MudListSubheader>
        <MudDivider/>
        @if (_alerts.Any())
        {
            <MudList Clickable="true" Class="overflow-scroll" Style="max-height: 300px;" Dense="true">
                @foreach (var alert in _alerts)
                {
                    <MudListItem class="notification-item">
                        <MudText><b>This is some notification message</b></MudText>
                        <MudText>@alert.ObjectType, @alert.AlertDateTime</MudText>
                    </MudListItem>
                }
            </MudList>
        }
        else
        {
            <MudText><b>There are no notifications. Come back later</b></MudText>
        }
        <MudDivider/>
        <MudText Color="Color.Info" Class="px-2 pt-4 object-bottom">
            <b>View all notifications</b>
        </MudText>
    </MudPopover>
</MudBadge>

<MudOverlay @bind-Visible="_isOverlayTriggered" DarkBackground="false" @onclick="ToggleOpenNotifications"/>

@code {
    bool _isNotificationsPopoverOpen = false;
    bool _isOverlayTriggered = false;

    List<NotificationDto> _alerts = new List<NotificationDto>();
    List<NotificationDto> _dummyAlertDtos = new List<NotificationDto>()
    {
        new NotificationDto() { Id = 1, AlertDateTime = DateTime.Now, ObjectId = 1, ObjectType = AlertType.Area },
        new NotificationDto() { Id = 2, AlertDateTime = DateTime.Now, ObjectId = 2, ObjectType = AlertType.Equipment },
        new NotificationDto() { Id = 3, AlertDateTime = DateTime.Now, ObjectId = 3, ObjectType = AlertType.Area },
        new NotificationDto() { Id = 4, AlertDateTime = DateTime.Now, ObjectId = 4, ObjectType = AlertType.Equipment },
        new NotificationDto() { Id = 1, AlertDateTime = DateTime.Now, ObjectId = 1, ObjectType = AlertType.Area },
        new NotificationDto() { Id = 2, AlertDateTime = DateTime.Now, ObjectId = 2, ObjectType = AlertType.Equipment },
        new NotificationDto() { Id = 3, AlertDateTime = DateTime.Now, ObjectId = 3, ObjectType = AlertType.Area },
        new NotificationDto() { Id = 4, AlertDateTime = DateTime.Now, ObjectId = 4, ObjectType = AlertType.Equipment },
        new NotificationDto() { Id = 1, AlertDateTime = DateTime.Now, ObjectId = 1, ObjectType = AlertType.Area },
        new NotificationDto() { Id = 2, AlertDateTime = DateTime.Now, ObjectId = 2, ObjectType = AlertType.Equipment },
        new NotificationDto() { Id = 3, AlertDateTime = DateTime.Now, ObjectId = 3, ObjectType = AlertType.Area },
        new NotificationDto() { Id = 4, AlertDateTime = DateTime.Now, ObjectId = 4, ObjectType = AlertType.Equipment },

    };

    protected override void OnInitialized()
    {
        _alerts = _dummyAlertDtos;
        base.OnInitialized();
    }

    public void ToggleOpenNotifications()
    {
        _isNotificationsPopoverOpen = !_isNotificationsPopoverOpen;
        _isOverlayTriggered = !_isNotificationsPopoverOpen;
    }

}